# O valor da função1 retorna 20 e o valor da função global retorna 10, por mais que a função chame a função 1 e tenha a mesma variável

a é GLOBAL 

def funcao1 ():
    a = 20
    print("print dentro da funcao1: ")
    print(a)

a = 10
funcao1()
print("print dentro do corpo principal: ")
print(a)

# Nesse exemplo irá retornar 20 nos dois PRINT, pois agora foi declarado "a" como GLOBAL na primeira função

def funcao1 ():
    global a 
    a = 20
    print("print dentro da funcao1: ")
    print(a)

a = 10
funcao1()
print("print dentro do corpo principal: ")
print(a)

#visualizar números com muitos dígitos  underline (_), para O tipo int conjunto dos inteiros (Z) 
type(1_000_000) 
<class 'int'>

#float é usado para elementos do conjunto dos reais (R), devemos usar o ponto e não virgula
type(50.0)
<class 'float'>

# Ao usar a vírgula como separador 
50, 0
(50, 0)

# Divisão inteira = "// 

# Divisão com resto = "%" 

#complex para manipular números complexos na forma x + yj 
r = complex(2,5)
r
(2+5j)

w=2+5j 
type (w)
<class 'complex'>

#r.conjugate() retorna o conjugado do número complexo r, em que a parte real é mantida e a parte imaginária tem o seu sinal trocado.

#tipo bool, expressões booleanas.True ou False 
2>3
False
2<3
True
#Operador NOT / True, not(valor) terá o valor False 
not (2<3)
False

# Simbolos matematicos
Soma	+ 
Subtração	-
Multiplicação	*
Divisão	/
Divisão inteira	//
Resto na divisão inteira	%
Valor absoluto	abs(parâmetro)
Exponenciação	**
<	Menor que
<=	Menor ou igual a
>	Maior que
>=	Maior ou igual a
==	Igual
!=	Não igual


# UPPER Transforma todas as letras em maiúsculas
curso = 'Ensino a Distância'
curso.upper()
'ENSINO A DISTÂNCIA'

#LOWER letras minusculas 
curso.lower()
'ensino a distância'

# SPLIT() Quebra a string em substrings. 
curso.split()
['Ensino', 'a', 'Distância']

# x in s -	True se x for um subconjunto de s
#x not in s	- False se x for um subconjunto de s
#s + t	- Concatenação de s e t
#n*s -	Concatenação de n cópias de s
#s[i] -	Caractere de índice i em s
#len(s) -	Comprimento de s
#min(s)	- Menor item de s
#max(s)	- Maior item de s 

# Dicionários 
{<chave 1>:<valor 1>, <chave 2>:<valor 2>, ..., <chave i>:<valor i>}
telefones = {'1': [ "Humberto", "Henrique", "5555-5555"], '2': ["João", "Silva", "5555-5555"]}
telefones['1'] ['Humberto', 'Henrique', '5555-5555']
telefones ['2'] ['João', 'Silva', '5555-5555']


#[expressões ...]	- Definição de lista
#x[ ], x[índice : índice]	- Operador de indexação
#**	- Exponenciação
#+x, -x	- Sinal de positivo e negativo
#*, /, //, %	- Produto, divisão, divisão inteira, resto
#+, -	- Soma, subtração
#in, not in, <, <=, >, >=, <>, !=, ==	- Comparações, inclusive a ocorrência em listas
#not x	- Booleano NOT (não)
#and	- Booleano AND (e)
#or	- Booleano OR (ou) 
#Realizar operações algébricas função eval() em conjunto com a input(). """
numero = eval(input('Entre com um numero inteiro: ')) 
numero = numero +2 
print(numero)

#Exemplo IMC (índice de massa corpórea)  """ 
 peso = eval(input('Entre com seu peso: '))
 altura = eval(input('Entre com sua altura: '))
 imc = peso/altura**2
 print('IMC= ', imc)

#Saída formatada de dados: função print() com o separador exemplos: """"
  print(str(hora) + ' : ' + str(minutos) + ' : ' + str(segundos))
print('{} : {} : {} '.format(hora, minutos, segundos))
print(f'{hora} : {minutos} : {segundos} ')

#especificar a largura de campo para exibir um inteiro """ 
'{:4}, {:5}.format(10,100)' 10, 100 # 4 espaços com {:4} (2 foram ocupados e 2 ficaram em branco), e que a segunda variável deveria ser impressa com 5 espaços com {:5} (3 foram ocupados e 2 ficaram em branco).

#O método format() para imprimir valores de ponto flutuante com a precisão definida  
'{:8.5}'.format(10/3) '3.333'
# o usar {:8.5}, estamos determinando que a impressão será com 8 espaços, mas apenas 5 serão utilizados.

#Impressão de sequências printf() /  função print() passando como parâmetro a sequência.
seq = [ 0,1,2]
print(seq)
[0,1,2]

#string como lida da direita para a esquerda utilizar [: : -1] 
print(str[::-1])
dlroW olleh
print(str[8:2:-1])
row ol

#Saida formatada de Dados com variaveis

# Todo Input é tratado como String

X = input("Entre com seu nome: ")
X = " O nome informado foi " + X
print(X)
Run: Entre com seu nome: Fulanodetal
O nome informado foi Fulanodetal

X = input("Entre com seu nome: ")
print('O nome informado foi {}'.format(X))
Run: Entre com seu nome: Fulanodetal
O nome informado foi Fulanodetal

#Com duas variáveis
nomepai = input("Entre com seu nome: ")
nomefilha = input("Entre com o nome da filha: ")
print('O pai de {} é {}'.format(nomefilha,nomepai))
Entre com seu nome: fulano
Entre com o nome da filha: beltrano
O pai de beltrano é fulano

#Outra forma
nomepai = input("Entre com seu nome: ")
nomefilha = input("Entre com o nome da filha: ")
print(f'O pai de {nomefilha} é {nomepai}')
Entre com seu nome: fulano
Entre com o nome da filha: beltrano
O pai de beltrano é fulano

#Nos caso de numero inteiro utilizar Eval
x = eval(input("Entre com a sua idade: "))
X +=1
print(X)

#IF, ELIF E ELSE 
   if <condição 1>:
2     Bloco de código que será executado caso condição seja True
3     elif <condição 2>:
4     Bloco de código que será executado caso condição 1 seja False e condição 2 seja True
5     else:
6     Bloco de código que será executado caso condição 1 seja False e condição 2 seja False
7     Instrução fora do if

#exemplo SE <5 (IF), SE FOR ==5 (ELIF) SE NÃO (ELSE)
 idade = eval(input('Informe a idade da criança: '))
  2 if idade < 5:
  3 print('A criança deve ser vacinada contra a gripe.')
  4 print('Procure o posto de saúde mais próximo.')
  5 elif idade == 5:
  6 print('A vacina estará disponível em breve.')
  7 print('Aguarde as próximas informações.')
  8 else:
  9 print('A vacinação só ocorrerá daqui a 3 meses.')
10  print('Informe-se novamente neste prazo.')
11 print('Cuide da saúde sempre. Até a próxima.')

#listas do tipo range() Simples
range(3) cria a sequência (0, 1, 2).

#Não iniciadas em 0 
range(2, 7)  cria a sequência (2, 3, 4, 5, 6)

#indicando inicio, fim e passo
range(2, 9, 3) cria a sequência (2, 5, 8).

for letra in nome:
    print(letra)

 #O laço for com uma string   
Entre com seu nome: >? jefferson
j
e
f
f
e
r
s
o
n

#Uso do laço for com qualquer sequência
nomes = ['Laura', 'Lis', 'Guilherme', 'Enzo', 'Arthur']
for nome in nomes:
    print(nome)
Laura
Lis
Guilherme
Enzo
Arthur

#IF, ELSE E RANGE DENTRO DO FOR
for numero in range(1,11,1):
    if numero%2 == 0:
        print(f'{numero} é par  ')
    else:
        print (f'{numero} é impar')   
1 é impar
2 é par  
3 é impar
4 é par  
5 é impar
6 é par  
7 é impar
8 é par  
9 é impar
10 é par  


#Estrutura de repetição while
palavra = input('Entre com uma palavra: ')
while palavra != 'sair':
    palavra = input('Digite sair para encerrar o laço: ')
print('Você digitou sair e agora está fora do laço')

#O laço while infinito
while True:
 Bloco que será repetido indefinidamente


#Auxiliares break, continue e pass
  while True:
2 print('Você está no primeiro laço.')
3 opcao1 = input('Deseja sair dele? Digite SIM para isso. ')
4 if opcao1 == 'SIM':
5 break # este break é do primeiro laço
6 else:
7 while True:
8 print('Você está no segundo laço.')
9 opcao2 = input('Deseja sair dele? Digite SIM para isso. ')
10 if opcao2 == 'SIM':
11 break # este break é do segundo laço
12 print('Você saiu do segundo laço.')
13 print('Você saiu do primeiro laço')


# Instrução continue
for num in range(1, 11):
2 if num == 5:
3 continue
4 else:
5 print(num)
6 print('Laço encerrado')
1
2
3
4
Laço encerrado


#Instrução pass
for num in range(1, 11):
2 if num % 2 == 0:
3 pass
4 else:
5 print(num)
6 print('Laço encerrado')
1
3
5
7
9
Laço encerrado

#Importar módulo
import nome_modulo
#Chamar a função desejada, precedida do nome do módulo, com a instrução:
nome_modulo.nome_funcao(paramêtros)

math
usado para operações matemáticas.
random
usado para gerar números pseudoaleatórios
smtplib
usado para permitir envio de e-mails
time
usado para implementar contadores temporais.
tkinter
usado para desenvolver interfaces gráficas.

MATH
Função	    Retorno
sqrt(x)	- Raiz quadrada de x
ceil(x)	- Menor inteiro maior ou igual a x
floor(x) - Maior inteiro menor ou igual a x
cos(x) - Cosseno de x
sin(x) - Seno de x
log(x, b) - Logaritmo de x na base b
pi - Valor de Pi (3.141592...)
e - Valor de e (2.718281...)

Distribuições de valores reais módulo random.
Função	            Retorno
random() - 	        Número de ponto flutuante no intervalo [0.0, 1.0)
uniform(a, b) -     Número de ponto flutuante N tal que a ≤ N ≤ b
gauss(mu, sigma) -  Distribuição gaussiana. mu é a média e sigma é o desvio padrão.
normalvariate(mu, sigma) - Distribuição normal. mu é a média e sigma é o desvio padrão

Funções para números inteiros módulo random.
Função	            Retorno
randrange(stop) / randrange(start, stop [,step]) -   Um elemento selecionado aleatório de range(start, stop, step), mas sem construir um objeto range.
randint(a, b) -     Número inteiro N tal que a ≤ N ≤ b

Funções para sequências módulo random.
Função                      	Retorno
choice(seq) -	Elemento aleatório de uma sequência não vazia seq.
shuffle(x[, random]) -	Embaralha a sequência x no lugar.
sample(pop, k) - Uma sequência de tamanho k de elementos escolhidos da população pop, sem repetição. Usada para amostragem sem substituição.

Módulo time
Função	Retorno
time()	Número de segundos passados desde o início da contagem (epoch). Por padrão, o início é 00:00:00 do dia 1 de janeiro de 1970.
ctime(segundos)	Uma string representando o horário local, calculado a partir do número de segundos passado como parâmetro.
gmtime(segundos)	Converte o número de segundos em um objeto struct_time descrito a seguir.
localtime(segundos)	Semelhante à gmtime(), mas converte para o horário local.
sleep(segundos)	A função suspende a execução por determinado número de segundos.

Função  time() e ctime().
 x = time.time()
>>> print(f'Local time: {time.ctime(x)}')
Local time: Tue Jun 30 23:38:55 2020
 
 Pacotes Externos:
Nome do módulo	    Para que serve?
numpy	Cálculos -  operações matemáticas e simulações
pandas  -          	Manipulação de dados
scikit-learn	-   Modelos de aprendizado de máquina
matplotlib  -	Visualização de dados
requests    -	Biblioteca de comandos de comunicação pelo protocolo HTTP
flask   -	Construção de aplicações web

Exceção	                            Explicação
KeyboardInterrupt   -	Levantado quando o usuário pressiona CTRL + C, a combinação de interrupção.
OverflowError   -	Levantado quando uma expressão de ponto flutuante é avaliada como um valor muito grande.
ZeroDivisionError	-   Levantado quando se tenta dividir por 0.
IOError -   	Levantado quando uma operação de entrada/saída falha por um motivo relacionado a isso.
IndexError  -  	Levantado quando um índice sequencial está fora do intervalo de índices válidos.
NameError   -	Levantado quando se tenta avaliar um identificador (nome) não atribuído.
TypeError   -	Levantado quando uma operação da função é aplicada a um objeto do tipo errado.
ValueError  -	Levantado quando a operação ou função tem um argumento com o tipo correto, mas valor incorreto.

__init__() serve para inicialização de classes: 
class Conta:
def__init__(self, numero, cpf, nomeTitular, saldo):
self.numero = numero
self.cpf = cpf
self.nomeTitular = nomeTitular
self.saldo = saldo

classe sem um método construtor:
class A():
def f():
print ‘foo’

método decorator @property:
@property
def saldo(self):
return self._saldo

Os métodos decorados com a property @setter forçam que todas alterações de valor dos atributos privados devem passar por esses métodos.
@saldo.setter
def saldo(self, saldo):
if (self.saldo < 0):
print(“saldo inválido”)
else:
self._saldo = saldo 

método como estático, deve-se usar o decorator @classmethod
Em (1), é criado o parâmetro cls como referência para classe.
Em (2), é retornado o valor do atributo de classe _total_circulos.
class Circulo:
_total_circulos = 0
def__init__(self,pontox, pontoy, raio):
self.pontox = pontox
self.pontoy = pontoy
self.raio = raio
type(self)._total_circulos +=1
@classmethod
def get total_circulos(cls): (1)
return cls.total_circulos (2)

métodos estáticos 
 import math
class Math:
@staticmethod
def sqrt(x):
return math.sqrt(x)
Math.sqrt(20)
4.47213595499958

Os dois underscores antes do método indicam que ele é privado:
método geralsaldo como privado
  
class Circulo:
def__init__(self,clientes,numero,saldo):
self.clientes = clientes
self.numero = numero
self.saldo = saldo
def __gerarsaldo(self):
print(f"numero: {self.numero}\n saldo:{self.saldo}")


        Instanciação de objetos
                                            Linguagens
                                        Java	C++	    Python
Instanciação de objetos                 X        X         X
Construtores de objetos                 X        X         X
Modificadores de acesso atributos       X        X         X(*)
Modificadores de acesso métodos         X        X         X
Herança múltipla                                 X         X           
Classes informais                                X         X 
Tipos primitivos                        X        X 
Interfaces                              X        X 
Sobrecarga de métodos                   X        X 

Exemplo funções de ordem superior (higher order function).

def multiplicar_por(multiplicador):
    def multi(multiplicando):
    return multiplicando * multiplicador
    return multi
    multiplicar_por_10 = multiplicar_por(10)
    print(multiplicar_por_10(1))
    print(multiplicar_por_10(2)) 
    multiplicar_por_5 = multiplicar_por(5)
    print(multiplicar_por_5(1))
    print(multiplicar_por_5(2))


 Lista valores como argumento para a função altera_lista
 
 valores = [10, 20, 30] 
    def altera_lista(lista):
    lista[2] = lista[2] + 10
    return lista
    print("Nova lista", altera_lista(valores))
    print("Nova lista", altera_lista(valores))

valores = [10, 20, 30] 
    def altera_lista(lista):
    nova_lista = list(lista)
    nova_lista[2] = nova_lista[2] + 10
    return nova_lista
    print("Nova lista", altera_lista(valores))
    print("Nova lista", altera_lista(valores))

Funções puras - dependem apenas dos parâmetros de entrada para gerar uma saída
    
    valor = 20
    def multiplica(fator):
    global valor
    valor = valor * fator
    print("Resultado", valor)
    multiplica(3)
    multiplica(3)

valor = 20
    def multiplica(valor, fator):
    valor = valor * fator
    return valor 
    print("Resultado", multiplica(valor, 3))
    print("Resultado", multiplica(valor, 3))

Funções lambda - funções anônimas / lambda argumentos: expressão

def multiplicar_por(multiplicador):
    return lambda multiplicando: multiplicando * multiplicador
    multiplicar_por_10 = multiplicar_por(10)
    print(multiplicar_por_10(1))
    print(multiplicar_por_10(2))    
    multiplicar_por_5 = multiplicar_por(5)
    print(multiplicar_por_5(1))
    print(multiplicar_por_5(2))

    def multiplicar_por(multiplicador):
    def multi(multiplicando):
    return multiplicando * multiplicador
    return multi
    multiplicar_por_10 = multiplicar_por(10)
    print(multiplicar_por_10(1))
    print(multiplicar_por_10(2))
    multiplicar_por_5 = multiplicar_por(5)
    print(multiplicar_por_5(1))
    print(multiplicar_por_5(2))

função map é pura e de ordem superior - map(função, iterável1, iterável2...)

lista = [1, 2, 3, 4, 5] 
    def triplica_itens(iterable): ## recebe um iterável como parâmetro
    lista_aux = []   ## cria uma lista auxiliar para garantir imutabilidade
    for item in iterable: ## percorre os itens do iterável passado como parâmetro 
    lista_aux.append(item*3) ## adiciona os itens triplicados à lista auxiliar
    return lista_aux  ##retorna a lista auxiliar
    nova_lista = triplica_itens(lista) ##Essa função é chamada com o argumento lista 
    print(nova_lista)  ##resultado é impresso 

    lista = [1, 2, 3, 4, 5]
    def triplica(item): ## triplica e retorna o item passado como parâmetro 
    return item * 3  ## triplica e retorna o item passado como parâmetro 
    nova_lista = map(triplica, lista) ##É utilizada, assim como a variável lista, como argumentos para a função map 
    print(list(nova_lista)) ##O resultado da função map é armazenado na variável nova_lista

    lista = [1, 2, 3, 4, 5]
    nova_lista = map(lambda item: item * 3, lista)
    print(list(nova_lista))

Filter - utilizada para filtrar elementos de um iterável (lista, tupla, dicionários etc.)
sintaxe - filter(função, iterável)

lista = [1, 2, 3, 4, 5]
    def impares(iterable): ##parâmetro
    lista_aux = [] ## lista auxiliar para garantir imutabilidade
    for item in iterable: ## percorre os itens do iterável passados como parâmetros
    if item % 2 != 0: ## adiciona os itens ímpares à lista auxiliar
    lista_aux.append(item) ## adiciona os itens ímpares à lista auxiliar
    return lista_aux  ## retorna a lista auxiliar
    nova_lista = impares(lista)
    print(nova_lista)

lista = [1, 2, 3, 4, 5]
    def impar(item): ##retorna true se o item passado como parâmetro é ímpar ou false caso contrário
    return item % 2 != 0    
    nova_lista = filter(impar, lista)
    print(list(nova_lista))

lista = [1, 2, 3, 4, 5]
    nova_lista = filter(lambda item: item % 2 != 0, lista)
    print(list(nova_lista))



